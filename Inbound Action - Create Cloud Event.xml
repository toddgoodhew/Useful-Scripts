---------  Instructions  ---------
1.  Import XML
2.  Create subscription
               A. Set the field Protocol to "Email-JSON"
               B. Endpoint is the email address of the instance.
3.  Monitor the mailbox Inbound for the subscription confirmation.
    A.  Need to manually confirm the subscription.
                              i.  Click on the Related Link "Preview HTML Body".  The data is presented in JSON format.
                              ii. Find the Key "SubscribeURL" and copy it.  It may wrap to additional lines.
                              iii. Paste the URL into the browser to confirm the subscription.  When doing this, the browser page will display the message "This XML file
                                   does not appear to have any style information...".  Ignore this.  Verify in AWS the subscription is confirmed.
4. Testing
               1. Start or stop and EC2 instance.
               2. Verify the email arives in "Inbox".
               3. Check the Cloud Events [sn_cmp_cloud_event] table to verify the event was created.


--------- XML ---------

<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2020-05-11 16:12:22">
<sysevent_in_email_action action="INSERT_OR_UPDATE">
<action>record_action</action>
<active>true</active>
<assignment_operator/>
<condition_script/>
<description/>
<event_name>email.read</event_name>
<filter_condition table="sys_email">user=no-reply@sns.amazonaws.com^subjectSTARTSWITH[AWS Config:^EQ<item goto="false" or="false" field="user" endquery="false" value="no-reply@sns.amazonaws.com" operator="=" newquery="false"/>
<item goto="false" or="false" field="subject" endquery="false" value="[AWS Config:" operator="STARTSWITH" newquery="false"/>
<item goto="false" or="false" field="" endquery="true" value="" operator="=" newquery="false"/>
</filter_condition>
<from display_value=""/>
<name>Create Cloud Event</name>
<order>90</order>
<reply_email/>
<required_roles/>
<script><![CDATA[// Used with Cloud Management to ingest CI state changes from AWS via an SNS message using Email-JSON protocol.
// This is in place since the AWS IP addresses where not added to IP Address Access Control, thus the standard
// REST message cannot be used.

var body = email.body_text;
//remove newline characters from the body so payload will be correctly formatted.
var bodyFixed = body.replace(/(\n *)/gm,'');  
current.payload = bodyFixed;
current.headers = global.JSON.stringify({"x-amz-sns-message-type": "Notification",
					'header': email.headers});
current.insert();
]]></script>
<stop_processing>true</stop_processing>
<sys_class_name>sysevent_in_email_action</sys_class_name>
<sys_created_by>tgoodhew</sys_created_by>
<sys_created_on>2020-01-17 20:11:57</sys_created_on>
<sys_domain>global</sys_domain>
<sys_domain_path>/</sys_domain_path>
<sys_id>279d42d3db128410b914e9c9489619db</sys_id>
<sys_mod_count>86</sys_mod_count>
<sys_name>Create Cloud Event</sys_name>
<sys_overrides display_value=""/>
<sys_package display_value="Global" source="global">global</sys_package>
<sys_policy/>
<sys_scope display_value="Global">global</sys_scope>
<sys_update_name>sysevent_in_email_action_279d42d3db128410b914e9c9489619db</sys_update_name>
<sys_updated_by>tgoodhew</sys_updated_by>
<sys_updated_on>2020-05-11 16:12:01</sys_updated_on>
<table>sn_cmp_cloud_event</table>
<template/>
<type>new</type>
</sysevent_in_email_action>
</unload>
